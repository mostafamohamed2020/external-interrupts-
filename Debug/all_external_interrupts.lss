
all_external_interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  000002b4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000087  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002e4  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000166  00000000  00000000  00000d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000379  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000171  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_18>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  8a:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
unsigned char i;
unsigned char num[] ={0,1,2,3,4,5,6,7,8,9};	

//ISR for INT0
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
	
		PORTA = 0x0f;
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9d e0       	ldi	r25, 0x0D	; 13
  ac:	a3 e0       	ldi	r26, 0x03	; 3
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	a0 40       	sbci	r26, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <__vector_1+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <__vector_1+0x26>
  b8:	00 00       	nop
		_delay_ms(1000);
		PORTA = 0x00;
  ba:	1b ba       	out	0x1b, r1	; 27
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9d e0       	ldi	r25, 0x0D	; 13
  c0:	a3 e0       	ldi	r26, 0x03	; 3
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	a0 40       	sbci	r26, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__vector_1+0x30>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <__vector_1+0x3a>
  cc:	00 00       	nop
		_delay_ms(1000);
	
}
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <INT0_initit>:
//configuration function for INT0
void INT0_initit (void)
{
	SREG &= (~(1<<7));   //disables global interrupts
  e0:	8f b7       	in	r24, 0x3f	; 63
  e2:	8f 77       	andi	r24, 0x7F	; 127
  e4:	8f bf       	out	0x3f, r24	; 63
	GICR |= (1<<INT0);   //enables INT0 source
  e6:	8b b7       	in	r24, 0x3b	; 59
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01);  //the action is falling edge
  ec:	85 b7       	in	r24, 0x35	; 53
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	85 bf       	out	0x35, r24	; 53
	MCUCR &= (~(1<<ISC00));
  f2:	85 b7       	in	r24, 0x35	; 53
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	85 bf       	out	0x35, r24	; 53
	SREG |= (1<<7);       //enables global interrupts
  f8:	8f b7       	in	r24, 0x3f	; 63
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8f bf       	out	0x3f, r24	; 63
}
  fe:	08 95       	ret

00000100 <__vector_2>:

//ISR for INT1
ISR(INT1_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	for(i = 0;i<10;i++)
 11a:	10 92 6a 00 	sts	0x006A, r1
 11e:	20 e0       	ldi	r18, 0x00	; 0
	{
	
	PORTC = num[i];
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	e2 0f       	add	r30, r18
 128:	f1 1d       	adc	r31, r1
 12a:	20 81       	ld	r18, Z
 12c:	25 bb       	out	0x15, r18	; 21
 12e:	2f e9       	ldi	r18, 0x9F	; 159
 130:	36 e8       	ldi	r19, 0x86	; 134
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	40 40       	sbci	r20, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <__vector_2+0x34>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_2+0x3e>
 13e:	00 00       	nop
}

//ISR for INT1
ISR(INT1_vect)
{
	for(i = 0;i<10;i++)
 140:	20 91 6a 00 	lds	r18, 0x006A
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	20 93 6a 00 	sts	0x006A, r18
 14a:	2a 30       	cpi	r18, 0x0A	; 10
 14c:	58 f3       	brcs	.-42     	; 0x124 <__vector_2+0x24>
	PORTC = num[i];
	_delay_ms(500);
	}
	
	
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <INT1_initit>:
//configuration function for INT1
void INT1_initit (void)
{
	SREG &= (~(1<<7));   //disables global interrupts
 168:	8f b7       	in	r24, 0x3f	; 63
 16a:	8f 77       	andi	r24, 0x7F	; 127
 16c:	8f bf       	out	0x3f, r24	; 63
	GICR |= (1<<INT1);   //enables INT1 source
 16e:	8b b7       	in	r24, 0x3b	; 59
 170:	80 68       	ori	r24, 0x80	; 128
 172:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC11);  //the action is falling edge
 174:	85 b7       	in	r24, 0x35	; 53
 176:	88 60       	ori	r24, 0x08	; 8
 178:	85 bf       	out	0x35, r24	; 53
	MCUCR &= (~(ISC10));
 17a:	85 b7       	in	r24, 0x35	; 53
 17c:	8d 7f       	andi	r24, 0xFD	; 253
 17e:	85 bf       	out	0x35, r24	; 53
	SREG |= (1<<7);       //enables global interrupts
 180:	8f b7       	in	r24, 0x3f	; 63
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8f bf       	out	0x3f, r24	; 63
	
}
 186:	08 95       	ret

00000188 <__vector_18>:

//ISR for INT2
ISR(INT2_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
	//rotating the motor for 5 seconds
	PORTB &= (~(1<<PB6));
 19a:	c6 98       	cbi	0x18, 6	; 24
	PORTB |= (1<<PB7);
 19c:	c7 9a       	sbi	0x18, 7	; 24
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	92 e4       	ldi	r25, 0x42	; 66
 1a2:	af e0       	ldi	r26, 0x0F	; 15
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	a0 40       	sbci	r26, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <__vector_18+0x1c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <__vector_18+0x26>
 1ae:	00 00       	nop
	_delay_ms(5000);
	PORTB |= (1<<PB6);
 1b0:	c6 9a       	sbi	0x18, 6	; 24
	PORTB |= (1<<PB7);
 1b2:	c7 9a       	sbi	0x18, 7	; 24
	
}
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <INT2_initit>:

//configuration function for INT2
void INT2_initit (void)
{
	SREG &= (~(1<<7));   //disables global interrupts
 1c6:	8f b7       	in	r24, 0x3f	; 63
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	8f bf       	out	0x3f, r24	; 63
	GICR |= (1<<INT2);   //enables INT2 source
 1cc:	8b b7       	in	r24, 0x3b	; 59
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= (~(1<<ISC2)); //the action is falling edge
 1d2:	84 b7       	in	r24, 0x34	; 52
 1d4:	8f 7b       	andi	r24, 0xBF	; 191
 1d6:	84 bf       	out	0x34, r24	; 52
	SREG |= (1<<7);       //enables global interrupts
 1d8:	8f b7       	in	r24, 0x3f	; 63
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	8f bf       	out	0x3f, r24	; 63
	
}
 1de:	08 95       	ret

000001e0 <main>:

int main(void)
{ 
	//registers direction and initial values
	DDRC |= ((1<<PC0) | (1<<PC1) |(1<<PC2) | (1<<PC3));  //four output pins for 7-seg
 1e0:	84 b3       	in	r24, 0x14	; 20
 1e2:	8f 60       	ori	r24, 0x0F	; 15
 1e4:	84 bb       	out	0x14, r24	; 20
	PORTC &=(~((1<<PC0)	|(1<<PC1)	|(1<<PC2)	|(1<<PC3))) ;    //initial value is zero
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	80 7f       	andi	r24, 0xF0	; 240
 1ea:	85 bb       	out	0x15, r24	; 21
	DDRA = 0x0f;			//four leds
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;			//all leds are off
 1f0:	1b ba       	out	0x1b, r1	; 27
	DDRB |= (1<<PB6);		 //motor pins
 1f2:	be 9a       	sbi	0x17, 6	; 23
	DDRB |= (1<<PB7);
 1f4:	bf 9a       	sbi	0x17, 7	; 23
	PORTB |= (1<<PB6);		//motor is off
 1f6:	c6 9a       	sbi	0x18, 6	; 24
	PORTB |= (1<<PB7);
 1f8:	c7 9a       	sbi	0x18, 7	; 24
	DDRD &= (~(1<<PD2));    //PD2/INT0	input pin
 1fa:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= (~(1<<PD3));    //PD3/INT1	input pin
 1fc:	8b 98       	cbi	0x11, 3	; 17
	DDRB |= (~(1<<PB2));    //PB2/INT2	input pin
 1fe:	87 b3       	in	r24, 0x17	; 23
 200:	8b 6f       	ori	r24, 0xFB	; 251
 202:	87 bb       	out	0x17, r24	; 23
	
	//calling interrupts functions
	INT0_initit();
 204:	0e 94 70 00 	call	0xe0	; 0xe0 <INT0_initit>
	INT1_initit();
 208:	0e 94 b4 00 	call	0x168	; 0x168 <INT1_initit>
	INT2_initit();
 20c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <INT2_initit>
 210:	ff cf       	rjmp	.-2      	; 0x210 <main+0x30>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
